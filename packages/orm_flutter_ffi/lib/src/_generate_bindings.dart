// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `query_engine_bridge.h`.
///
/// Regenerate bindings with `dart run ffigen`.
///
class QueryEngineBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  QueryEngineBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  QueryEngineBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  /// Create a new [QueryEngine]
  /// Returns a [Status] code.
  Status create(
    ConstructorOptions options,
    ffi.Pointer<ffi.Pointer<QueryEngine>> qePtr,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errorStringPtr,
  ) {
    return Status.fromValue(_create(
      options,
      qePtr,
      errorStringPtr,
    ));
  }

  late final _createPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ConstructorOptions,
              ffi.Pointer<ffi.Pointer<QueryEngine>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('create');
  late final _create = _createPtr.asFunction<
      int Function(ConstructorOptions, ffi.Pointer<ffi.Pointer<QueryEngine>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Destroy a [QueryEngine]
  Status destroy(
    ffi.Pointer<QueryEngine> qe,
  ) {
    return Status.fromValue(_destroy(
      qe,
    ));
  }

  late final _destroyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<QueryEngine>)>>('destroy');
  late final _destroy =
      _destroyPtr.asFunction<int Function(ffi.Pointer<QueryEngine>)>();

  /// Start a [QueryEngine]
  Status start(
    ffi.Pointer<QueryEngine> qe,
    ffi.Pointer<ffi.Char> trace,
    ffi.Pointer<ffi.Char> requestId,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errorStringPtr,
  ) {
    return Status.fromValue(_start(
      qe,
      trace,
      requestId,
      errorStringPtr,
    ));
  }

  late final _startPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<QueryEngine>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('start');
  late final _start = _startPtr.asFunction<
      int Function(ffi.Pointer<QueryEngine>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Stop a [QueryEngine]
  Status stop(
    ffi.Pointer<QueryEngine> qe,
    ffi.Pointer<ffi.Char> headerStr,
    ffi.Pointer<ffi.Char> requestId,
  ) {
    return Status.fromValue(_stop(
      qe,
      headerStr,
      requestId,
    ));
  }

  late final _stopPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.Pointer<QueryEngine>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('stop');
  late final _stop = _stopPtr.asFunction<
      int Function(ffi.Pointer<QueryEngine>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Apply migrations
  Status applyMigrations(
    ffi.Pointer<QueryEngine> qe,
    ffi.Pointer<ffi.Char> migrationsPath,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errorStringPtr,
  ) {
    return Status.fromValue(_applyMigrations(
      qe,
      migrationsPath,
      errorStringPtr,
    ));
  }

  late final _applyMigrationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<QueryEngine>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('applyMigrations');
  late final _applyMigrations = _applyMigrationsPtr.asFunction<
      int Function(ffi.Pointer<QueryEngine>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Query a prisma request
  ffi.Pointer<ffi.Char> query(
    ffi.Pointer<QueryEngine> qe,
    ffi.Pointer<ffi.Char> bodyStr,
    ffi.Pointer<ffi.Char> headerStr,
    ffi.Pointer<ffi.Char> txIdStr,
    ffi.Pointer<ffi.Char> requestId,
    ffi.Pointer<ffi.Pointer<ffi.Char>> errorStringPtr,
  ) {
    return _query(
      qe,
      bodyStr,
      headerStr,
      txIdStr,
      requestId,
      errorStringPtr,
    );
  }

  late final _queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<QueryEngine>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('query');
  late final _query = _queryPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<QueryEngine>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  /// Start a transaction
  ffi.Pointer<ffi.Char> startTransaction(
    ffi.Pointer<QueryEngine> qe,
    ffi.Pointer<ffi.Char> optionsStr,
    ffi.Pointer<ffi.Char> headerStr,
    ffi.Pointer<ffi.Char> requestId,
  ) {
    return _startTransaction(
      qe,
      optionsStr,
      headerStr,
      requestId,
    );
  }

  late final _startTransactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<QueryEngine>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('startTransaction');
  late final _startTransaction = _startTransactionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<QueryEngine>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Commit a transaction queries
  ffi.Pointer<ffi.Char> commitTransaction(
    ffi.Pointer<QueryEngine> qe,
    ffi.Pointer<ffi.Char> txIdStr,
    ffi.Pointer<ffi.Char> headerStr,
    ffi.Pointer<ffi.Char> requestId,
  ) {
    return _commitTransaction(
      qe,
      txIdStr,
      headerStr,
      requestId,
    );
  }

  late final _commitTransactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<QueryEngine>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('commitTransaction');
  late final _commitTransaction = _commitTransactionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<QueryEngine>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  /// Rollback a transaction
  ffi.Pointer<ffi.Char> rollbackTransaction(
    ffi.Pointer<QueryEngine> qe,
    ffi.Pointer<ffi.Char> txIdStr,
    ffi.Pointer<ffi.Char> headerStr,
    ffi.Pointer<ffi.Char> requestId,
  ) {
    return _rollbackTransaction(
      qe,
      txIdStr,
      headerStr,
      requestId,
    );
  }

  late final _rollbackTransactionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<QueryEngine>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('rollbackTransaction');
  late final _rollbackTransaction = _rollbackTransactionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<QueryEngine>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();
}

final class QueryEngine extends ffi.Opaque {}

final class ConstructorOptionsNative extends ffi.Struct {
  external ffi.Pointer<ffi.Char> config_dir;
}

/// Parameters defining the construction of an engine.
/// Unlike the Node version, this doesn't support the GraphQL protocol for talking with the prisma/client, since it is
/// deprecated and going forward everything should be done via JSON rpc.
final class ConstructorOptions extends ffi.Struct {
  external ffi.Pointer<ffi.Char> id;

  external ffi.Pointer<ffi.Char> datamodel;

  external ffi.Pointer<ffi.Char> base_path;

  external ffi.Pointer<ffi.Char> log_level;

  @ffi.Bool()
  external bool log_queries;

  @ffi.Bool()
  external bool enable_tracing;

  external ffi.Pointer<ffi.Char> datasource_overrides;

  external ffi.Pointer<ffi.Char> env;

  @ffi.Bool()
  external bool ignore_env_var_errors;

  external ConstructorOptionsNative native;

  external ffi.Pointer<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>
      log_callback;
}

/// function returns status code.
///
/// see:
/// - [QueryEngineBindings.create]
/// - [QueryEngineBindings.destroy]
/// - [QueryEngineBindings.start]
/// - [QueryEngineBindings.stop]
/// - [QueryEngineBindings.applyMigrations]
enum Status {
  /// Success
  ok(0),

  /// Error
  err(1),

  /// Missing pointer, only create returns.
  miss(2);

  final int value;
  const Status(this.value);

  static Status fromValue(int value) => switch (value) {
        0 => ok,
        1 => err,
        2 => miss,
        _ => throw ArgumentError("Unknown value for Status: $value"),
      };
}
